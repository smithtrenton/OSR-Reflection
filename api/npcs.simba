(*
Npcs
=======

Npcs contains the npc api methods.

*)

{$include_once ..\wrappers\npc.simba}

type
  TNpcApi = type(TApi);
var
  npcAPI: TNpcApi;

function TNpcApi.getValidNPCIndices: TIntegerArray;
var
  i, len, index: Integer;
begin
  len := reflectLib.getFieldArraySize(0, hook_Client_getNPCIndices);
  for i := 0 to len - 1 do
  begin
    index := reflectLib.getFieldArrayInt(0, hook_Client_getNPCIndices, i);
    if (index < 1) then Break;
    Insert(index, Result);
  end;
  ClearSameIntegers(Result);
end;

function TNpcApi.getNPCs(filter: function(var n: TNPC): Boolean): TNPCArray;
var
  indices: TIntegerArray;
  len, i: Integer;
  npc: TNPC;
begin
  indices := Self.getValidNPCIndices;
  len := Length(indices);
  for i := 0 to (len - 1) do
  begin
    npc.create(0, hook_Client_getLocalNPCs, indices[i], 'TNpcApi.getNPCs');
    if (npc.isNull) or (not filter(npc)) then
    begin
      npc.free;
      continue;
    end;
    npc.def.free;
    Insert(npc, Result);
  end;
end;

function TNpcApi.getNPCs: TNPCArray; overload;
  function filter(var n: TNPC): Boolean;
  begin
    Result := true;
  end;
begin
  Result := Self.getNPCs(@filter);
end;

function TNpcApi.getNpc(filter: function(var n: TNPC): Boolean): TNPC;
var
  npcs: TNPCArray;
  len: Integer;
begin
  npcs := Self.getNpcs(@filter);
  len := Length(npcs);
  if (len > 0) then
  begin
    Result := npcs[0];
    Delete(npcs, 0, 1);
  end;
  npcs.free;
end;

function TNpcApi.findNpcs(filter: function(var n: TNPC): Boolean; var npcs: TNPCArray): Boolean;
begin
  npcs.free;
  npcs := Self.getNpcs(@filter);
  Result := Length(npcs) > 0;
end;

function TNpcApi.findNpcs(filter: function(var n: TNPC): Boolean): Boolean; overload;
var
  npcs: TNPCArray;
begin
  Result := Self.findNpcs(@filter, npcs);
  npcs.free;
end;

function TNpcApi.findNpc(filter: function(var n: TNPC): Boolean; var npc: TNPC): Boolean;
begin
  npc.free;
  npc := Self.getNpc(@filter);
  Result := not npc.isNull;
  if not Result then
    npc.free;
end;

function TNpcApi.findNpc(filter: function(var n: TNPC): Boolean): Boolean; overload;
var
  npc: TNPC;
begin
  Result := Self.findNpc(@filter, npc);
  npc.free;
end;
