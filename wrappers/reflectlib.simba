(*
reflectlib
==========

reflectlib contains all of SMART functions used in the include. It integrates the
SmartObjectManager into the background. Also contains several ease-of-use improve-
ments and puts everything into the TReflectLib wrapper.

*)

{$include_once ..\wrappers\smartobject.simba}

type
  TReflectLib = record
    smartPointer: PtrUInt;
    objectManager: TSmartObjectArray;
  end;
var
  reflectLib: TReflectLib;

procedure TReflectLib.create(_target: PtrUInt);
begin
  Self.smartPointer := _target;
end;

function TReflectLib.getFieldObject(objref:PtrUInt;hook:THook;name:String):PtrUInt;
begin
  Result := SmartGetFieldObject(Self.smartPointer, objref, hook.path);
  Self.objectManager.add(Result, hook, name);
end;

function TReflectLib.getFieldArray3DObject(objref:PtrUInt;hook:THook;x,y,z:integer;name:String):PtrUInt;
begin
  Result := SmartGetFieldArray3DObject(Self.smartPointer, objref, hook.path, x, y, z);
  Self.objectManager.add(Result, hook, name);
end;

function TReflectLib.getFieldArray2DObject(objref:PtrUInt;hook:THook;x,y:integer;name:String):PtrUInt;
begin
  Result := SmartGetFieldArray2DObject(Self.smartPointer, objref, hook.path, x, y);
  Self.objectManager.add(Result, hook, name);
end;

function TReflectLib.getFieldArrayObject(objref:PtrUInt;hook:THook;index:integer;name:String):PtrUInt;
begin
  Result := SmartGetFieldArrayObject(Self.smartPointer, objref, hook.path, index);
  Self.objectManager.add(Result, hook, name);
end;

procedure TReflectLib.freeObject(objref:PtrUInt);
begin
  Self.objectManager.removeRef(objref);
  if ((Self.objectManager.count(objref) = 0) and (objref > 0) and not Self.isNull(objref)) then
  begin
    SmartFreeObject(Self.smartPointer, objref);
  end;
end;

function TReflectLib.freeAllObjects(debug: Boolean): Integer;
begin
  Result := 0;
  if debug then
    writeln('Clearing SmartObjectManager:');
  while (Self.objectManager.getSize > 0) do
  begin
    if not Self.isNull(Self.objectManager.get(0).ref) then
      SmartFreeObject(Self.smartPointer, Self.objectManager.get(0).ref);
    if debug then
      writeln(#9 + Self.objectManager.get(0).toString);
    Self.objectManager.remove(0);
    Inc(Result);
  end;
end;

function TReflectLib.getFieldObject(objref:PtrUInt;hook:THook):PtrUInt; overload;
begin
  Result := Self.getFieldObject(objref, hook, '');
end;

function TReflectLib.getFieldArray3DObject(objref:PtrUInt;hook:THook;x,y,z:integer):PtrUInt; overload;
begin
  Result := Self.getFieldArray3DObject(objref, hook, x, y, z, '');
end;

function TReflectLib.getFieldArray2DObject(objref:PtrUInt;hook:THook;x,y:integer):PtrUInt; overload;
begin
  Result := Self.getFieldArray2DObject(objref, hook, x, y, '');
end;

function TReflectLib.getFieldArrayObject(objref:PtrUInt;hook:THook;index:integer):PtrUInt; overload;
begin
  Result := Self.getFieldArrayObject(objref, hook, index, '');
end;

function TReflectLib.isNull(objref:PtrUInt):Boolean;
begin
  Result := SmartIsNull(Self.smartPointer, objref);
end;

function TReflectLib.isEqual(obja, objb:PtrUInt):Boolean;
begin
  Result := SmartIsEqual(Self.smartPointer, obja, objb);
end;

function TReflectLib.isPathValid(objref:PtrUInt;hook:THook):Boolean;
begin
  Result := SmartIsPathValid(Self.smartPointer, objref, hook.path);
end;

function TReflectLib.getFieldBoolean(objref:PtrUInt;hook:THook):Boolean;
begin
  Result := SmartGetFieldBoolean(Self.smartPointer, objref, hook.path);
end;

function TReflectLib.getFieldLongH(objref:PtrUInt;hook:THook):Integer;
begin
  Result := SmartGetFieldLongH(Self.smartPointer, objref, hook.path);
end;

function TReflectLib.getFieldLongL(objref:PtrUInt;hook:THook):Integer;
begin
  Result := SmartGetFieldLongL(Self.smartPointer, objref, hook.path);
end;

function TReflectLib.getFieldInt(objref:PtrUInt;hook:THook):Integer;
begin
  Result := (SmartGetFieldInt(Self.smartPointer, objref, hook.path) * hook.mult);
end;

function TReflectLib.getFieldShort(objref:PtrUInt;hook:THook):Integer;
begin
  Result := SmartGetFieldShort(Self.smartPointer, objref, hook.path);
end;

function TReflectLib.getFieldFloat(objref:PtrUInt;hook:THook):Extended;
begin
  Result := SmartGetFieldFloat(Self.smartPointer, objref, hook.path);
end;

function TReflectLib.getFieldDouble(objref:PtrUInt;hook:THook):Extended;
begin
  Result := SmartGetFieldDouble(Self.smartPointer, objref, hook.path);
end;

function TReflectLib.getFieldByte(objref:PtrUInt;hook:THook):Integer;
begin
  Result := SmartGetFieldByte(Self.smartPointer, objref, hook.path);
end;

function TReflectLib.getFieldArray3DByte(objref:PtrUInt;hook:THook;x,y,z:integer):Integer;
begin
  Result := SmartGetFieldArray3DByte(Self.smartPointer, objref, hook.path, x, y, z);
end;

function TReflectLib.getFieldArray3DChar(objref:PtrUInt;hook:THook;x,y,z:integer):Integer;
begin
  Result := SmartGetFieldArray3DChar(Self.smartPointer, objref, hook.path, x, y, z);
end;

function TReflectLib.getFieldArray3DShort(objref:PtrUInt;hook:THook;x,y,z:integer):Integer;
begin
  Result := SmartGetFieldArray3DShort(Self.smartPointer, objref, hook.path, x, y, z);
end;

function TReflectLib.getFieldArray3DInt(objref:PtrUInt;hook:THook;x,y,z:integer):Integer;
begin
  Result := SmartGetFieldArray3DInt(Self.smartPointer, objref, hook.path, x, y, z);
end;

function TReflectLib.getFieldArray3DFloat(objref:PtrUInt;hook:THook;x,y,z:integer):Extended;
begin
  Result := SmartGetFieldArray3DFloat(Self.smartPointer, objref, hook.path, x, y, z);
end;

function TReflectLib.getFieldArray3DDouble(objref:PtrUInt;hook:THook;x,y,z:integer):Extended;
begin
  Result := SmartGetFieldArray3DDouble(Self.smartPointer, objref, hook.path, x, y, z);
end;

function TReflectLib.getFieldArray3DBoolean(objref:PtrUInt;hook:THook;x,y,z:integer):Boolean;
begin
  Result := SmartGetFieldArray3DBoolean(Self.smartPointer, objref, hook.path, x, y, z);
end;

function TReflectLib.getFieldArray3DLongH(objref:PtrUInt;hook:THook;x,y,z:integer):Integer;
begin
  Result := SmartGetFieldArray3DLongH(Self.smartPointer, objref, hook.path, x, y, z);
end;

function TReflectLib.getFieldArray3DLongL(objref:PtrUInt;hook:THook;x,y,z:integer):Integer;
begin
  Result := SmartGetFieldArray3DLongL(Self.smartPointer, objref, hook.path, x, y, z);
end;

function TReflectLib.getFieldArray2DByte(objref:PtrUInt;hook:THook;x,y:integer):Integer;
begin
  Result := SmartGetFieldArray2DByte(Self.smartPointer, objref, hook.path, x, y);
end;

function TReflectLib.getFieldArray2DChar(objref:PtrUInt;hook:THook;x,y:integer):Integer;
begin
  Result := SmartGetFieldArray2DChar(Self.smartPointer, objref, hook.path, x, y);
end;

function TReflectLib.getFieldArray2DShort(objref:PtrUInt;hook:THook;x,y:integer):Integer;
begin
  Result := SmartGetFieldArray2DShort(Self.smartPointer, objref, hook.path, x, y);
end;

function TReflectLib.getFieldArray2DInt(objref:PtrUInt;hook:THook;x,y:integer):Integer;
begin
  Result := SmartGetFieldArray2DInt(Self.smartPointer, objref, hook.path, x, y);
end;

function TReflectLib.getFieldArray2DFloat(objref:PtrUInt;hook:THook;x,y:integer):Extended;
begin
  Result := SmartGetFieldArray2DFloat(Self.smartPointer, objref, hook.path, x, y);
end;

function TReflectLib.getFieldArray2DDouble(objref:PtrUInt;hook:THook;x,y:integer):Extended;
begin
  Result := SmartGetFieldArray2DDouble(Self.smartPointer, objref, hook.path, x, y);
end;

function TReflectLib.getFieldArray2DBoolean(objref:PtrUInt;hook:THook;x,y:integer):Boolean;
begin
  Result := SmartGetFieldArray2DBoolean(Self.smartPointer, objref, hook.path, x, y);
end;

function TReflectLib.getFieldArray2DLongH(objref:PtrUInt;hook:THook;x,y:integer):Integer;
begin
  Result := SmartGetFieldArray2DLongH(Self.smartPointer, objref, hook.path, x, y);
end;

function TReflectLib.getFieldArray2DLongL(objref:PtrUInt;hook:THook;x,y:integer):Integer;
begin
  Result := SmartGetFieldArray2DLongL(Self.smartPointer, objref, hook.path, x, y);
end;

function TReflectLib.getFieldArrayByte(objref:PtrUInt;hook:THook;index:integer):Integer;
begin
  Result := SmartGetFieldArrayByte(Self.smartPointer, objref, hook.path, index);
end;

function TReflectLib.getFieldArrayChar(objref:PtrUInt;hook:THook;index:integer):Integer;
begin
  Result := SmartGetFieldArrayChar(Self.smartPointer, objref, hook.path, index);
end;

function TReflectLib.getFieldArrayShort(objref:PtrUInt;hook:THook;index:integer):Integer;
begin
  Result := SmartGetFieldArrayShort(Self.smartPointer, objref, hook.path, index);
end;

function TReflectLib.getFieldArrayInt(objref:PtrUInt;hook:THook;index:integer):Integer;
begin
  Result := SmartGetFieldArrayInt(Self.smartPointer, objref, hook.path, index);
end;

function TReflectLib.getFieldArrayFloat(objref:PtrUInt;hook:THook;index:integer):Extended;
begin
  Result := SmartGetFieldArrayFloat(Self.smartPointer, objref, hook.path, index);
end;

function TReflectLib.getFieldArrayDouble(objref:PtrUInt;hook:THook;index:integer):Extended;
begin
  Result := SmartGetFieldArrayDouble(Self.smartPointer, objref, hook.path, index);
end;

function TReflectLib.getFieldArrayBoolean(objref:PtrUInt;hook:THook;index:integer):Boolean;
begin
  Result := SmartGetFieldArrayBool(Self.smartPointer, objref, hook.path, index);
end;

function TReflectLib.getFieldArrayLongH(objref:PtrUInt;hook:THook;index:integer):Integer;
begin
  Result := SmartGetFieldArrayLongH(Self.smartPointer, objref, hook.path, index);
end;

function TReflectLib.getFieldArrayLongL(objref:PtrUInt;hook:THook;index:integer):Integer;
begin
  Result := SmartGetFieldArrayLongL(Self.smartPointer, objref, hook.path, index);
end;

function TReflectLib.getFieldArraySize(objref:PtrUInt;hook:THook):Integer;
begin
  Result := SmartGetFieldArraySize(Self.smartPointer, objref, hook.path, 0);
end;

{function TReflectLib.getFieldArray2DSize(objref:PtrUInt;hook:THook;index:integer):Integer;
var
  obj: PtrUInt;
begin
  obj := Self.getFieldArrayObject(objref, hook, index);
  Result := SmartGetFieldArraySize(Self.smartPointer, obj, ' ', 0);
  Self.freeObject(obj);
end;}

function TReflectLib.stringFromString(objref:PtrUInt):String;
begin
  SetLength(Result, 512);
  SetLength(Result, SmartStringFromString(Self.smartPointer, objref, Result));
  Result := Trim(Replace(Replace(Result, #194, '', [rfReplaceAll]), #160, #32, [rfReplaceAll]));
end;

function TReflectLib.stringFromBytes(objref:PtrUInt):String;
begin
  SetLength(Result, 512);
  SetLength(Result, SmartStringFromBytes(Self.smartPointer, objref, Result));
  Result := Trim(Replace(Replace(Result, #194, '', [rfReplaceAll]), #160, #32, [rfReplaceAll]));
end;

function TReflectLib.stringFromChars(objref:PtrUInt):String;
begin
  SetLength(Result, 512);
  SetLength(Result, SmartStringFromChars(Self.smartPointer, objref, Result));
  Result := Trim(Replace(Replace(Result, #194, '', [rfReplaceAll]), #160, #32, [rfReplaceAll]));
end;

function TReflectLib.getFieldString(objref:PtrUInt;hook:THook):String;
var
  obj: Integer;
begin
  obj := Self.getFieldObject(objref, hook);
  Result := Self.stringFromString(obj);
  Self.freeObject(obj);
end;

function TReflectLib.getFieldArrayString(objref:PtrUInt;hook:THook;index:integer):String;
var
  obj: Integer;
begin
  obj := Self.getFieldArrayObject(objref, hook, index);
  Result := Self.stringFromString(obj);
  Self.freeObject(obj);
end;

function TReflectLib.getFieldArray2DString(objref:PtrUInt;hook:THook;x,y:integer):String;
var
  obj: Integer;
begin
  obj := Self.getFieldArray2DObject(objref, hook, x, y);
  Result := Self.stringFromString(obj);
  Self.freeObject(obj);
end;

function TReflectLib.getFieldArray3DString(objref:PtrUInt;hook:THook;x,y,z:integer):String;
var
  obj: Integer;
begin
  obj := Self.getFieldArray3DObject(objref, hook, x, y, z);
  Result := Self.stringFromString(obj);
  Self.freeObject(obj);
end;

function TReflectLib.getFieldStringArray(objref:PtrUInt;hook:THook): TStringArray;
var
  hi, i: Integer;
begin
  SetLength(Result, Self.getFieldArraySize(objref, hook));
  hi := High(Result);
  for i := 0 to hi do
  begin
    Result[i] := Self.getFieldArrayString(objref, hook, i);
  end;
end;

function TReflectLib.getFieldIntArray(objref:PtrUInt;hook:THook): TIntegerArray;
var
  hi, i: Integer;
begin
  SetLength(Result, Self.getFieldArraySize(objref, hook));
  hi := High(Result);
  for i := 0 to hi do
  begin
    Result[i] := Self.getFieldArrayInt(objref, hook, i);
  end;
end;

function TReflectLib.getFieldBooleanArray(objref:PtrUInt;hook:THook): array of Boolean;
var
  hi, i: Integer;
begin
  SetLength(Result, Self.getFieldArraySize(objref, hook));
  hi := High(Result);
  for i := 0 to hi do
  begin
    Result[i] := Self.getFieldArrayBoolean(objref, hook, i);
  end;
end;

function TReflectLib.getFieldDoubleArray(objref:PtrUInt;hook:THook): array of Double;
var
  hi, i: Integer;
begin
  SetLength(Result, Self.getFieldArraySize(objref, hook));
  hi := High(Result);
  for i := 0 to hi do
  begin
    Result[i] := Self.getFieldArrayDouble(objref, hook, i);
  end;
end;

function TReflectLib.getFieldFloatArray(objref:PtrUInt;hook:THook): TExtendedArray;
var
  hi, i: Integer;
begin
  SetLength(Result, Self.getFieldArraySize(objref, hook));
  hi := High(Result);
  for i := 0 to hi do
  begin
    Result[i] := Self.getFieldArrayFloat(objref, hook, i);
  end;
end;

function TReflectLib.getFieldByteArray(objref:PtrUInt;hook:THook): array of Byte;
var
  hi, i: Integer;
begin
  SetLength(Result, Self.getFieldArraySize(objref, hook));
  hi := High(Result);
  for i := 0 to hi do
  begin
    Result[i] := Self.getFieldArrayByte(objref, hook, i);
  end;
end;

function TReflectLib.getFieldCharArray(objref:PtrUInt;hook:THook): TIntegerArray;
var
  hi, i: Integer;
begin
  SetLength(Result, Self.getFieldArraySize(objref, hook));
  hi := High(Result);
  for i := 0 to hi do
  begin
    Result[i] := Self.getFieldArrayChar(objref, hook, i);
  end;
end;

function TReflectLib.getFieldShortArray(objref:PtrUInt;hook:THook): TIntegerArray;
var
  hi, i: Integer;
begin
  SetLength(Result, Self.getFieldArraySize(objref, hook));
  hi := High(Result);
  for i := 0 to hi do
  begin
    Result[i] := Self.getFieldArrayShort(objref, hook, i);
  end;
end;
