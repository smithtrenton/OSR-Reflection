(*
RSObject
========

RSObject contains the RSObject record and accessors

*)

{$include_once ..\wrappers\reflectlib.simba}

type
  TRSObject = record
    ref: PtrUInt;
  end;

procedure TRSObject.create(_ref: PtrUInt);
begin
  Self.ref := _ref;
end;

procedure TRSObject.create(_ref: PtrUInt; hook: THook; name: String); overload;
begin
  Self.create(reflectLib.getFieldObject(_ref, hook, name));
end;

procedure TRSObject.create(_ref: PtrUInt; hook: THook; index: Integer; name: String); overload;
begin
  Self.create(reflectLib.getFieldArrayObject(_ref, hook, index, name));
end;

procedure TRSObject.create(_ref: PtrUInt; hook: THook; x, y: Integer; name: String); overload;
begin
  Self.create(reflectLib.getFieldArray2DObject(_ref, hook, x, y, name));
end;

procedure TRSObject.create(_ref: PtrUInt; hook: THook; x, y, z: Integer; name: String); overload;
begin
  Self.create(reflectLib.getFieldArray3DObject(_ref, hook, x, y, z, name));
end;

procedure TRSObject.create(_ref: PtrUInt; hook: THook); overload;
begin
  Self.create(reflectLib.getFieldObject(_ref, hook));
end;

procedure TRSObject.create(_ref: PtrUInt; hook: THook; index: Integer); overload;
begin
  Self.create(reflectLib.getFieldArrayObject(_ref, hook, index));
end;

procedure TRSObject.create(_ref: PtrUInt; hook: THook; x, y: Integer); overload;
begin
  Self.create(reflectLib.getFieldArray2DObject(_ref, hook, x, y));
end;

procedure TRSObject.create(_ref: PtrUInt; hook: THook; x, y, z: Integer); overload;
begin
  Self.create(reflectLib.getFieldArray3DObject(_ref, hook, x, y, z));
end;

procedure TRSObject.free;
begin
  reflectLib.freeObject(Self.ref);
  Self.ref := 0;
end;

function TRSObject.isNull: Boolean;
begin
  Result := (ref <= 0) or reflectLib.isNull(Self.ref);
end;

function TRSObject.isEqual(rsobj: TRSObject): Boolean;
begin
  Result := reflectLib.isEqual(Self.ref, rsobj.ref);
end;
