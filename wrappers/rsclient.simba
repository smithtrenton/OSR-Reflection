(*
RSClient
======

RSClient contains the rsclient record and accessors

*)

type
  TRSClient = type(TApi);

var
  rsclient: TRSClient;

function TRSClient.getGameCycle: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getGameCycle);
end;

function TRSClient.getGameState: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getGameState);
end;

function TRSClient.getLoginState: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getLoginState);
end;

function TRSClient.getBaseX: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getBaseX);
end;

function TRSClient.getBaseY: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getBaseY);
end;

function TRSClient.getBaseTile: TPoint;
begin
  Result := Point(Self.getBaseX, Self.getBaseY);
end;

function TRSClient.getRawTile: TPoint;
var
  me: TRSObject;
begin
  me.create(0, hook_Client_getLocalPlayer, 'TRSClient.getRawTile');
  Result.x := reflectLib.getFieldInt(me.ref, hook_Character_getX);
  Result.y := reflectLib.getFieldInt(me.ref, hook_Character_getY);
  me.free;
end;

function TRSClient.getRawX: Integer;
var
  p: TPoint;
begin
  p := Self.getRawTile;
  Result := p.X;
end;

function TRSClient.getRawY: Integer;
var
  p: TPoint;
begin
  p := Self.getRawTile;
  Result := p.Y;
end;

function TRSClient.getLocalTile: TPoint;
begin
  Result := Self.getRawTile;
  Result.x := Result.x shr _LOCAL_XY_SHIFT;
  Result.y := Result.y shr _LOCAL_XY_SHIFT;
end;

function TRSClient.getLocalX: Integer;
var
  p: TPoint;
begin
  p := Self.getLocalTile;
  Result := p.X;
end;

function TRSClient.getLocalY: Integer;
var
  p: TPoint;
begin
  p := Self.getLocalTile;
  Result := p.Y;
end;

function TRSClient.getX: Integer;
begin
  Result := Self.getLocalX + Self.getBaseX;
end;

function TRSClient.getY: Integer;
begin
  Result := Self.getLocalY + Self.getBaseY;
end;

function TRSClient.getTile: TPoint;
begin
  Result := getLocalTile;
  Result.X += Self.getBaseX;
  Result.Y += Self.getBaseY;
end;

function TRSClient.getCameraPitch: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getCameraPitch);
end;

function TRSClient.getCameraYaw: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getCameraYaw);
end;

function TRSClient.getCameraX: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getCameraX);
end;

function TRSClient.getCameraY: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getCameraY);
end;

function TRSClient.getCameraZ: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getCameraZ);
end;

function TRSClient.getPlane: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getPlane);
end;

function TRSClient.getMapAngle: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getMapAngle);
end;

function TRSClient.getMapOffset: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getMapOffset);
end;

function TRSClient.getMapScale: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getMapScale);
end;

function TRSClient.getMenuActions: TStringArray;
begin
  Result := reflectLib.getFieldStringArray(0, hook_Client_getMenuActions);
end;

function TRSClient.getMenuCount: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getMenuCount);
end;

function TRSClient.getMenuHeight: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getMenuHeight);
end;

function TRSClient.getMenuWidth: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getMenuWidth);
end;

function TRSClient.getMenuX: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getMenuX);
end;

function TRSClient.getMenuY: Integer;
begin
  Result := reflectLib.getFieldInt(0, hook_Client_getMenuY);
end;

function TRSClient.isMenuOpen: Boolean;
begin
  Result := reflectLib.getFieldBoolean(0, hook_Client_isMenuOpen);
end;

function TRSClient.getCosineTable(index: Integer): Integer;
begin
  Result := reflectLib.getFieldArrayInt(0, hook_Client_getCosineTable, index);
end;

function TRSClient.getSineTable(index: Integer): Integer;
begin
  Result := reflectLib.getFieldArrayInt(0, hook_Client_getSineTable, index);
end;

function TRSClient.getGroundItemList(x, y, plane: Integer): TLinkedList;
begin
  Result.create(0, hook_Client_getGroundItems, plane, x, y, Format('TRSClient.getGroundItemList[%d][%d][%d]', [plane, x, y]));
end;

