(*
Widget
======

Widget contains the widget record and accessors

*)

type
  TWidget = type(TRSObject);
  TWidgetArray = array of TWidget;

procedure TWidgetArray.free;
var
  i, hi: Integer;
begin
  hi := High(Self);
  for i := 0 to hi do
    Self[i].free;
  Delete(Self, 0);
end;

function TWidget.toString: String; forward;

function TWidgetArray.toString: String;
var
  i, len: Integer;
begin
  len := Length(Self);
  Result := '[';
  for i := 0 to len - 1 do
  begin
    if i > 0 then
      Result := Result + ', ';
    Result := Result + Self[i].toString;
  end;
  Result := Result + '];';
end;

procedure TWidget.create(id, index: Integer); overload; forward;

function TWidget.getBoundsIndex: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getBoundsIndex);
end;

function TWidget.getWidth: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getWidth);
end;

function TWidget.getHeight: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getHeight);
end;

function TWidget.getRelativeX: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getRelativeX);
end;

function TWidget.getRelativeY: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getRelativeY);
end;

function TWidget.getWidgetX: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getX);
end;

function TWidget.getWidgetY: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getY);
end;

function TWidget.getBoundsX: Integer;
var
  len: Integer;
begin
  Result := Self.getBoundsIndex;
  if (Result <> -1) then
  begin
    len := reflectLib.getFieldArraySize(0, hook_Client_getWidgetBoundsX);
    if (Result < len) then
      Exit(reflectLib.getFieldArrayInt(0, hook_Client_getWidgetBoundsX, Result));
    Exit(0);
  end;
end;

function TWidget.getBoundsY: Integer;
var
  len: Integer;
begin
  Result := Self.getBoundsIndex;
  if (Result <> -1) then
  begin
    len := reflectLib.getFieldArraySize(0, hook_Client_getWidgetBoundsY);
    if (Result < len) then
      Exit(reflectLib.getFieldArrayInt(0, hook_Client_getWidgetBoundsY, Result));
    Exit(0);
  end;
end;

function TWidget.getScrollX: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getScrollX);
end;

function TWidget.getScrollY: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getScrollY);
end;

function TWidget.getActions: TStringArray;
begin
  Result := reflectLib.getFieldStringArray(Self.ref, hook_Widget_getActions);
end;

function TWidget.getName: String;
begin
  Result := reflectLib.getFieldString(Self.ref, hook_Widget_getName);
end;

function TWidget.getText: String;
begin
  Result := reflectLib.getFieldString(Self.ref, hook_Widget_getText);
end;

function TWidget.getID: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getID);
end;

function TWidget.getIndex: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getIndex);
end;

function TWidget.getIndices: TIntegerArray;
var
  index, id: Integer;
begin
  id := Self.getID;
  index := self.getIndex;
  if (index > -1) then
    Result := [sar(id, 16), id and $FFFF, index]
  else
    Result := [sar(id, 16), id and $FFFF];
end;

function TWidget.getIndicesString: String;
var
  arr: TIntegerArray;
begin
  arr := Self.getIndices;
  if (Length(arr) > 2) then
    Exit(Format('%d, %d, %d', [arr[0], arr[1], arr[2]]));
  Exit(Format('%d, %d', [arr[0], arr[1]]));
end;

function TWidget.getItemID: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getItemID);
end;

function TWidget.getStackSize: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getStackSize);
end;

function TWidget.getRootID: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getRootID);
end;

function TWidget.getBorderThickness: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getBorderThickness);
end;

function TWidget.getContentIds: TIntegerArray;
begin
  Result := reflectLib.getFieldIntArray(Self.ref, hook_Widget_getContentIDs);
end;

function TWidget.getStackSizes: TIntegerArray;
begin
  Result := reflectLib.getFieldIntArray(Self.ref, hook_Widget_getStackSizes);
end;

function TWidget.getLoopCycleStatus: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_Widget_getLoopCycleStatus);
end;

function TWidget.isValid: Boolean;
begin
  Result := (not Self.isNull)
    and (rsclient.getGameCycle < (Self.getLoopCycleStatus + 20));
end;

function TWidget.getChildCount: Integer;
begin
  Result := reflectLib.getFieldArraySize(Self.ref, hook_Widget_getChildren);
end;

function TWidget.getChild(index: Integer): TWidget;
begin
  Result.create(Self.ref, hook_Widget_getChildren, index, 'TWidget.getChild');
  if Result.isNull then
    Result.free;
end;

function TWidget.getChildren: TWidgetArray;
var
  len, c, i: Integer;
  temp: TWidget;
begin
  len := Self.getChildCount;
  c:= 0;
  SetLength(Result, len);

  for i := 0 to (len - 1) do
  begin
    temp := Self.getChild(i);
    if temp.isNull then
      continue;
    Result[c] := temp;
    inc(c);
  end;

  SetLength(Result, c);
end;

function TWidget.getRoot: TWidget;
begin
  Result.create(Self.ref, hook_Widget_getRoot, 'TWidget.getRoot');
end;

function TWidget.getParentID: Integer;
var
  id, i, len, wid: Integer;
  widgetHashTable: THashTable;
  widgetNodes: TNodeArray;
  node, next: TNode;
begin
  id := Self.getRootID;
  if (id > 0) then
    Exit(id);

  id := sar(Self.getID, 16);
  try
    widgetHashTable.create(0, hook_client_getWidgetNodeTable, 'TWidget.getParentID');
    widgetNodes := widgetHashTable.getNodes;
    len := Length(widgetNodes);
    for i := 0 to len - 1 do
    begin
      node := widgetNodes[i].getNext;

      while (widgetNodes[i].getUID <> node.getUID) do
      begin
        if (id = reflectLib.getFieldInt(node.ref, hook_WidgetNode_getID)) then
        begin
          Result := node.getUID;
          node.free;
          next.free;
          Exit;
        end;
        next := node.getNext;
        node.free;
        node := next;
      end;

      node.free;
      next.free;
    end;

  finally
    widgetHashTable.free;
    widgetNodes.free;
  end;
  Result := -1;
end;

function TWidget.getParent: TWidget;
var
  pid: Integer;
begin
  pid := Self.getParentID;
  if (pid > 0) then
  begin
    Result.create(pid, -1);
  end;
end;

function TWidget.isHidden: Boolean;
var
  parent: TWidget;
begin
  parent := Self.getParent;
  if (not parent.isNull) then
    Result := parent.isHidden
      else
        Result := reflectLib.getFieldBoolean(Self.ref, hook_Widget_isHidden);
  parent.free;
end;

function TWidget.getPosition: TPoint;
var
  parent: TWidget;
  boundsX, boundsY: TIntegerArray;
  i: Integer;
begin
  Result := Point(0, 0);
  parent := Self.getParent;
  if parent.isNull then
  begin
    parent.free;
    Exit(Point(Self.getBoundsX, Self.getBoundsY));
  end else
  begin
    Result := parent.getPosition;
    Result := Point(Result.x - parent.getScrollX, Result.y - parent.getScrollY);
  end;
  Result := Point(Result.x + Self.getRelativeX, Result.y + Self.getRelativeY);
  parent.free;
end;

function TWidget.getX: Integer;
begin
  Result := Self.getPosition.x;
end;

function TWidget.getY: Integer;
begin
  Result := Self.getPosition.y;
end;

function TWidget.getBounds: TBox;
var
  p: TPoint;
begin
  p := Self.getPosition;
  Result := PointToBox(p, Point(p.x + Self.getWidth, p.y + Self.getHeight));
end;

procedure TWidget.create(id, index: Integer);
var
  parent: TWidget;
begin
  if (index > 0) then
  begin
    parent.create(id, -1);
    if parent.isNull then
    begin
      parent.free;
      exit;
    end;
    Self := parent.getChild(index);
    parent.free;
  end else
    Self.create(0, hook_Client_getWidgets, sar(id, 16), id and $FFFF, 'TWidget.create');
  if Self.isNull then
    Self.free;
end;

function TWidget.toString: String;
begin
  Result := 'Widget[' + Self.getIndicesString + ']: Text = "' + Self.getText + '"';
end;
