(*
Widget
======

Widget contains the widget record and accessors

*)

{$include_once ..\wrappers\nodes.simba}

type
  TWidget = type(TRSObject);
  TWidgetArray = array of TWidget;

procedure TWidgetArray.free;
var
  i, len: Integer;
begin
  len := Length(self);
  for i := 0 to len - 1 do
    self[i].free;
  setLength(self, 0);
end;

function TWidget.toStr: String; forward;

function TWidgetArray.toStr: String;
var
  i, len: Integer;
begin
  len := Length(self);
  Result := '[';
  for i := 0 to len - 1 do
  begin
    if i > 0 then
      Result := Result + ', ';
    Result := Result + self[i].toStr;
  end;
  Result := Result + '];';
end;

function TWidget.createFromID(id: Integer): TWidget;
begin
  self.create(0, hook_Client_getWidgets, id shr 16, id and $FFFF, 'TWidget.create');
end;

function TWidget.getBoundsIndex: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getBoundsIndex);
end;

function TWidget.getWidth: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getWidth);
end;

function TWidget.getHeight: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getHeight);
end;

function TWidget.getRelativeX: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getRelativeX);
end;

function TWidget.getRelativeY: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getRelativeY);
end;

function TWidget.getWidgetX: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getX);
end;

function TWidget.getWidgetY: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getY);
end;

function TWidget.getBoundsX: Integer;
var
  boundsArr: TIntegerArray;
begin
  Result := self.getBoundsIndex;
  if (Result <> -1) then
  begin
    boundsArr := reflectLib.getFieldIntArray(0, hook_Client_getWidgetBoundsX);
    if (Result < Length(boundsArr)) then
      exit(boundsArr[Result]);
    exit(0);
  end;
end;

function TWidget.getBoundsY: Integer;
var
  boundsArr: TIntegerArray;
begin
  Result := self.getBoundsIndex;
  if (Result <> -1) then
  begin
    boundsArr := reflectLib.getFieldIntArray(0, hook_Client_getWidgetBoundsY);
    if (Result < Length(boundsArr)) then
      exit(boundsArr[Result]);
    exit(0);
  end;
end;

function TWidget.getScrollX: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getScrollX);
end;

function TWidget.getScrollY: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getScrollY);
end;

function TWidget.getActions: TStringArray;
begin
  Result := reflectLib.getFieldStringArray(self.ref, hook_Widget_getActions);
end;

function TWidget.getName: String;
begin
  Result := reflectLib.getFieldString(self.ref, hook_Widget_getName);
end;

function TWidget.getText: String;
begin
  Result := reflectLib.getFieldString(self.ref, hook_Widget_getText);
end;

function TWidget.getType: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getType);
end;

function TWidget.getID: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getID);
end;

function TWidget.getIndex: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getIndex);
end;

function TWidget.getItemID: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getItemID);
end;

function TWidget.getStackSize: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getStackSize);
end;

function TWidget.getRootID: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getRootID);
end;

function TWidget.getBorderThickness: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getBorderThickness);
end;

function TWidget.getContentIds: TIntegerArray;
begin
  Result := reflectLib.getFieldIntArray(self.ref, hook_Widget_getContentIDs);
end;

function TWidget.getStackSizes: TIntegerArray;
begin
  Result := reflectLib.getFieldIntArray(self.ref, hook_Widget_getStackSizes);
end;

function TWidget.getLoopCycleStatus: Integer;
begin
  Result := reflectLib.getFieldInt(self.ref, hook_Widget_getLoopCycleStatus);
end;

function TWidget.isValid: Boolean;
begin
  Result := (not self.isNull)
    and (rsclient.getGameCycle < (self.getLoopCycleStatus + 20));
end;

function TWidget.getChildren: TWidgetArray;
var
  len, c, i: Integer;
  temp: TWidget;
begin
  len := reflectLib.getFieldArraySize(self.ref, hook_Widget_getChildren);
  c:= 0;
  SetLength(Result, len);

  for i := 0 to (len - 1) do
  begin
    temp.create(self.ref, hook_Widget_getChildren, i, 'TWidget.getChildren[' + toString(i) + ']');
    if temp.isNull then
    begin
      temp.free;
      continue;
    end;
    Result[c] := temp;
    inc(c);
  end;

  SetLength(Result, c);
end;

function TWidget.getChild(index: Integer): TWidget;
begin
  Result.create(self.ref, hook_Widget_getChildren, index, 'TWidget.getChild');
end;

function TWidget.getRoot: TWidget;
begin
  Result.create(self.ref, hook_Widget_getRoot, 'TWidget.getRoot');
end;

function TWidget.getParentID: Integer;
var
  id, i, len: Integer;
  widgetHashTable: THashTable;
  widgetNodes: TNodeArray;
  node, next: TNode;
begin
  id := self.getRootID;
  if (id <> -1) then
    exit(id);

  id := (self.getID shr 16);
  try
    widgetHashTable.create(0, hook_client_getWidgetNodeTable, 'TWidget.getParentID');
    widgetNodes := widgetHashTable.getNodes;
    len := Length(widgetNodes);
    for i := 0 to len - 1 do
    begin
      node := widgetNodes[i].getNext;
      while (not (widgetNodes[i].isEqual(node))) do
      begin
        if (reflectLib.getFieldInt(node.ref, hook_WidgetNode_getID) = id) then
          exit(node.getUID);

        next := node.getNext;
        node.free;
        node := next;
      end;
      node.free;
      next.free;
    end;
  finally
    widgetHashTable.free;
    widgetNodes.free;
  end;
end;

function TWidget.getParent: TWidget;
begin
  Result.createFromID(self.getParentID);
end;

function TWidget.isHidden: Boolean;
var
  parent: TWidget;
begin
  parent := self.getParent;
  if (not parent.isNull) then
    Result := parent.isHidden
      else
        Result := reflectLib.getFieldBoolean(self.ref, hook_Widget_isHidden);
  parent.free;
end;

function TWidget.getPosition: TPoint;
var
  parent: TWidget;
  boundsX, boundsY: TIntegerArray;
  i: Integer;
begin
  Result := Point(0, 0);
  parent := self.getParent;
  try
    if parent.isNull then
    begin
      if(self.getBoundsIndex = -1) then
      begin
        Result := Point(self.getWidgetX, self.getWidgetY);
        Exit(Result);
      end;
      Result := Point(getBoundsX, getBoundsY);
      Exit(Result);
    end else
    begin
      Result := parent.getPosition;
      Result := Point(Result.x - parent.getScrollX, Result.y - parent.getScrollY);
    end;
    Result := Point(Result.x + self.getWidgetX, Result.y + self.getWidgetY);
  finally
    parent.free;
  end;
end;

function TWidget.getX: Integer;
begin
  Result := self.getPosition.x;
end;

function TWidget.getY: Integer;
begin
  Result := self.getPosition.y;
end;

function TWidget.getBounds: TBox;
var
  p: TPoint;
begin
  p := self.getPosition;
  Result := PointToBox(p, Point(p.x + self.getWidth, p.y + self.getHeight));
end;

function TWidget.toStr: String;
begin
  Result := 'Widget[' + toString(self.getID shr 16) + ', '
    + toString(self.getID and $ffff) + ']' ;
end;


