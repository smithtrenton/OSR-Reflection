(*
Nodes
=====

Nodes contains the node/hashtable record and accessors

*)

{$include_once ..\wrappers\rsobject.simba}

type
  TNode = type(TRSObject);
  TNodeArray = array of TNode;
  THashTable = type(TRSObject);
  TCache = type(TRSObject);
  TLinkedList = type(TRSObject);

function TNode.getNext: TNode;
begin
  Result.create(Self.ref, hook_Node_getNext, 'TNode.getNext');
end;

function TNode.getPrevious: TNode;
begin
  Result.create(Self.ref, hook_Node_getPrevious, 'TNode.getPrevious');
end;

function TNode.getUID: Integer;
begin
  Result := reflectLib.getFieldLongL(Self.ref, hook_Node_getUID);
end;

procedure TNodeArray.free;
var
  i, len: Integer;
begin
  len := Length(self);
  for i := 0 to len - 1 do
    self[i].free;
  setLength(self, 0);
end;

function THashTable.getSize: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_HashTable_getSize);
end;

function THashTable.getNodes: TNodeArray;
var
  len, c, i: Integer;
  temp: TNode;
begin
  len := Self.getSize;
  c:= 0;
  SetLength(Result, len);

  for i := 0 to (len - 1) do
  begin
    temp.create(Self.ref, hook_HashTable_getNodes, i, 'THashTable.getNodes[' + toString(i) + ']');
    if temp.isNull then
    begin
      temp.free;
      continue;
    end;
    Result[c] := temp;
    inc(c);
  end;

  SetLength(Result, c);
end;

function TCache.getHashTable: THashTable;
begin
  Result.create(Self.ref, hook_Cache_getHashTable, 'TCache.getHashTable');
end;

function TCache.getComposite(id: Integer): PtrUInt;
var
  hashTable: THashTable;
  nodes: TNodeArray;
  i, len: Integer;
  node, next: TNode;
begin
  hashTable := Self.getHashTable;
  nodes := hashTable.getNodes;
  try
    len := Length(nodes);
    for i := 0 to (len - 1) do
    begin
      node := nodes[i].getNext;

      while (nodes[i].getUID <> node.getUID) do
      begin
        if (id = node.getUID) then
        begin
          Result := node.ref;
          next.free;
          Exit;
        end;

        next := node.getNext;
        node.free;
        node := next;
      end;

      node.free;
      next.free;
    end;
  finally
    nodes.free;
    hashTable.free;
  end;
end;

function TLinkedList.getHead: TNode;
begin
  Result.create(Self.ref, hook_LinkedList_getHead, 'TLinkedList.getHead');
end;

function TLinkedList.getTail: TNode;
begin
  Result.create(Self.ref, hook_LinkedList_getTail, 'TLinkedList.getTail');
end;
