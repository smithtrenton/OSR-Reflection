(*
Npc
====

Npc contains the Npc record and accessors

*)

{$include_once ..\wrappers\character.simba}

type
  TNPCDefinition = type(TRSObject);
  TNPC = record(TCharacter)
    def: TNPCDefinition;
  end;
  TNPCArray = array of TNPC;

function TNPCDefinition.getActions: TStringArray;
begin
  Result := reflectLib.getFieldStringArray(Self.ref, hook_NPCDefinition_getActions);
end;

function TNPCDefinition.getCombatLevel: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_NPCDefinition_getCombatLevel);
end;

function TNPCDefinition.getID: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_NPCDefinition_getID);
end;

function TNPCDefinition.getName: String;
begin
  Result := reflectLib.getFieldString(Self.ref, hook_NPCDefinition_getName);
end;

function TNPCDefinition.getSettingID: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_NPCDefinition_getSettingID);
end;

function TNPCDefinition.getTransformIDs: TIntegerArray;
begin
  Result := reflectLib.getFieldIntArray(Self.ref, hook_NPCDefinition_getTransformIDs);
end;

function TNPCDefinition.getVarBitID: Integer;
begin
  Result := reflectLib.getFieldInt(Self.ref, hook_NPCDefinition_getVarBitID);
end;

function TNPCDefinition.isValid: Boolean;
begin
  Result := (Self.ref > 0) and (Length(Self.getName) > 0) and (Self.getName <> 'null');
end;

function TNPC.getDefinition: TNPCDefinition;
begin
  if (Self.def.isNull) then
    Self.def.create(Self.ref, hook_NPC_getDefinition, 'TNPC.getDefinition:' + def.getName);
  Result := Self.def;
end;

function TNPC.getActions: TStringArray;
begin
  Result := Self.getDefinition.getActions;
end;

function TNPC.getCombatLevel: Integer;
begin
  Result := Self.getDefinition.getCombatLevel;
end;

function TNPC.getID: Integer;
begin
  Result := Self.getDefinition.getID;
end;

function TNPC.getName: String;
begin
  Result := Self.getDefinition.getName;
end;

function TNPC.toString: String;
begin
  Exit(Format('%s(lvl:%d): %d at (%d, %d)', [Self.getName, Self.getCombatLevel, Self.getID, Self.getX, Self.getY]));
end;

procedure TNPC.free; override;
begin
  Self.def.free;
  reflectLib.freeObject(Self.ref);
  Self.ref := 0;
end;

procedure TNPCArray.free;
var
  i, hi: Integer;
begin
  hi := High(Self);
  for i := 0 to hi do
    Self[i].free;
  SetLength(Self, 0);
end;

procedure TNPCArray.remove(index: Integer);
begin
  Self[index].free;
  Delete(Self, index, 1);
end;

function TNPCArray.toString: String;
var
  i, len: Integer;
  str: String;
begin
  len := Length(Self);
  Result := GetGlobalName(@Self) + '(len = ' + IntToStr(len) + ') :';
  for i := 0 to len - 1 do
  begin
    Result := Result + #13#10#9 + Self[i].toString;
  end;
end;

